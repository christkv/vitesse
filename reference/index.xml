<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>References on Vitesse</title>
    <link>/vitesse/reference/</link>
    <description>Recent content in References on Vitesse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Mar 2015 12:53:30 -0400</lastBuildDate>
    <atom:link href="/vitesse/reference/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Domain Specific Language</title>
      <link>/vitesse/reference/dsl/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/vitesse/reference/dsl/</guid>
      <description>

&lt;h1 id=&#34;domain-specific-language&#34;&gt;Domain Specific Language&lt;/h1&gt;

&lt;p&gt;A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains, and lacks specialized features for a particular domain.&lt;/p&gt;

&lt;p&gt;Vitesse is a target to for custom DSLs created by developers. Let&amp;rsquo;s look at a very simple example leveraging ES6 to create a custom validation language.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;quot;use strict&amp;quot;

var v = require(&#39;vitesse&#39;),
  StringNode = v.StringNode,
  ObjectNode = v.ObjectNode,
  IntegerNode = v.IntegerNode,
  NumberNode = v.NumberNode,
  ArrayNode = v.ArrayNode,
  VitesseCompiler = v.Compiler;

class Validator {
  constructor() {    
  }

  static object() {
    return new ObjectBuilder();
  }

  static string() {
    return new StringBuilder();
  }

  static array() {
    return new ArrayBuilder();
  }
}

class Compiler {
  constructor() {    
  }

  compile(object, options) {
    options = options || {};
    options.optimizer = true;
    // Get the compiler
    return new VitesseCompiler().compile(object.object, options);
  }
}

class ObjectBuilder {
  constructor() {    
    this.object = new ObjectNode(null, null, {typeCheck:true});
  }

  fields(fields) {
    for(var name in fields) {
      this.object.addChild(name, fields[name].object);
    }

    return this;
  }

  require(required) {
    this.object.requiredFields(required);
    return this;
  }
}

class StringBuilder {
  constructor() {    
    this.object = new StringNode(null, null, {typeCheck:true})
  }

  in(values) {
    this.object.addValidation({$in: values});
    return this;
  }
}

class ArrayBuilder {
  constructor() {    
    this.object = new ArrayNode(null, null, {typeCheck:true})
  }

  of(object) {
    this.object.addItemValidation(object.object);
    return this;
  }
}

module.exports = {
  Validator: Validator,
  Compiler: Compiler
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simple custom DSL let&amp;rsquo;s you create validations of the following style.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var validator = Validator
  .object()
  .fields({
    id: Validator.string(),
    users: Validator.array().of(Validator.object().fields({
      id: Validator.string(),
      permissions: Validator.array().of(Validator.string().in([&#39;read&#39;, &#39;write&#39;, &#39;delete&#39;, &#39;upate&#39;]))
    })
    .require([&#39;id&#39;, &#39;permissions&#39;]))
  })
  .require([&#39;id&#39;, &#39;users&#39;]);  

var compiler = new Compiler();
var validator = compiler.compile(validator);
assert.equal(1, validator.validate({id:&#39;&#39;, users:[{id:&#39;&#39;, permissions:[&#39;yupp&#39;]}]}).length);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/vitesse/reference/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/vitesse/reference/</guid>
      <description>

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;The reference documentation the Vitesse module focuses on general use-cases.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/vitesse/vitesse/reference/dsl/&#34;&gt;Custom DSL&lt;/a&gt;: How to build your own custom DSL Validation language leveraging Vitesse.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/christkv/vitesse-jsonspec&#34;&gt;JSON Schema Validator&lt;/a&gt;: A JSON Schema validator implementation leveraging Vitesse to generate the underlying code.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>